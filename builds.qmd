---
title: "Build status"
output: html
editor_options: 
    chunk_output_type: console
---


```{r}
#| echo: false
suppressPackageStartupMessages({
    library(knitr)
    library(yaml)
    library(dplyr)
})
```

```{r}
#| echo: false

yml <- read_yaml("builds.yml")

get_package <- function(y) {
    if (y$section %in% c("bioc", "bioc-data")) {
        paste0(y$package, 
               " [GitHub](https://github.com/", y$github_url, ")", 
               " [Bioc](https://bioconductor.org/packages/", y$package, "/)")
    } else {
        if (!is.null(y$pypi)) {
            paste0(y$package, 
               " [GitHub](https://github.com/", y$github_url, ")", 
               " [PyPI](https://pypi.org/project/", y$pypi, "/)")
        } else {
            paste0(y$package, 
                   " [GitHub](https://github.com/", y$github_url, ")")
        }
    }
}

get_bioc_landing_page <- function(y, version) {
    if (y$section %in% c("bioc")) {
        paste0("[![](http://bioconductor.org/shields/build/", version, 
               "/bioc/", y$package, ".svg)]", 
               "(http://bioconductor.org/checkResults/", version, 
               "/bioc-LATEST/", y$package, ")")
    } else if (y$section == "bioc-data") {
        paste0("[![](http://bioconductor.org/shields/build/", version, 
               "/data-experiment/", y$package, ".svg)]", 
               "(http://bioconductor.org/checkResults/", version, 
               "/data-experiment-LATEST/", y$package, ")")
    } else {
        ""
    }
}

get_gha <- function(y) {
    if (!is.null(y$gha_workflow)) {
        paste0("[![build status](https://github.com/", y$github_url, 
               "/actions/workflows/", y$gha_workflow, "/badge.svg)]", 
               "(https://github.com/", y$github_url, "/actions)")
    } else {
        ""
    }
}

get_codecov <- function(y) {
    if (!is.null(y$codecov_branch)) {
        paste0("[![Codecov.io coverage status](https://codecov.io/github/", 
               y$github_url, "/coverage.svg?branch=", y$codecov_branch, ")]", 
               "(https://codecov.io/github/", y$github_url, ")")
    } else {
        ""
    }
}

get_gh <- function(y, type) {
    if (type == "issues") {
        paste0("[![GitHub issues](https://img.shields.io/github/issues/", 
               y$github_url, ")]", 
               "(https://github.com/", y$github_url, "/issues)")
    } else if (type == "prs") {
        paste0("[![GitHub PRs](https://img.shields.io/github/issues-pr/", 
               y$github_url, ")]", 
               "(https://github.com/", y$github_url, "/pulls)")
    }
}

get_bioc_support <- function(y) {
    if (y$section %in% c("bioc", "bioc-data")) {
        paste0("[![Support site activity, last 6 months: tagged ", 
               "questions/avg. answers per question/avg. comments per ", 
               "question/accepted answers, or 0 if no tagged posts.]", 
               "(http://www.bioconductor.org/shields/posts/", y$package, ".svg)]", 
               "(https://support.bioconductor.org/tag/", y$package, ")")
    } else {
        ""
    }
}

get_bioc_stats <- function(y) {
    if (y$section == c("bioc")) {
        paste0("[![Download stats](http://bioconductor.org/shields/downloads/release/",
               y$package, ".svg)]", 
               "(https://bioconductor.org/packages/stats/bioc/", y$package, "/)")
    } else if (y$section == "bioc-data") {
        paste0("[![Download stats](http://bioconductor.org/shields/downloads/release/",
               y$package, ".svg)]", 
               "(https://bioconductor.org/packages/stats/data-experiment/", y$package, "/)")
    } else {
        ""
    }
}

make_df <- function(yml) {
    df <- do.call(bind_rows, lapply(yml, function(y) {
        data.frame(
            Package = get_package(y),
            `Bioc devel` = get_bioc_landing_page(y, "devel"),
            `Bioc release` = get_bioc_landing_page(y, "release"),
            `GitHub Actions` = get_gha(y),
            `Code coverage` = get_codecov(y),
            `GitHub issues` = get_gh(y, "issues"),
            `GitHub PRs` = get_gh(y, "prs"),
            `Bioc support` = get_bioc_support(y),
            `Download stats` = get_bioc_stats(y),
            check.names = FALSE
        )
    }))
}
```

## Bioconductor software packages

### Maintainer

```{r}
#| echo: false

kable(make_df(yml[vapply(yml, function(y) y$role == "maintainer" && y$section == "bioc", FALSE)]), align = c("l", "c", "c", "c", "c", "c", "c", "c", "c"))
```

### Contributor/co-maintainer

```{r}
#| echo: false

kable(make_df(yml[vapply(yml, function(y) y$role == "contributor" && y$section == "bioc", FALSE)]), align = c("l", "c", "c", "c", "c", "c", "c", "c", "c"))
```

## Bioconductor data packages

```{r}
#| echo: false

kable(make_df(yml[vapply(yml, function(y) y$section == "bioc-data", FALSE)]), align = c("l", "c", "c", "c", "c", "c", "c", "c", "c"))
```

## Other software packages

See also [r-universe](https://csoneson.r-universe.dev/)

```{r}
#| echo: false

kable(make_df(yml[vapply(yml, function(y) y$section == "other-software", FALSE)])[, c("Package", "GitHub Actions", "Code coverage", "GitHub issues", "GitHub PRs")], align = c("l", "c", "c", "c", "c"))
```

## Non-software repositories

```{r}
#| echo: false

kable(make_df(yml[vapply(yml, function(y) y$section == "other", FALSE)])[, c("Package", "GitHub Actions", "GitHub issues", "GitHub PRs")] |>
                      dplyr::rename(Repository = Package), align = c("l", "c", "c", "c", "c"))
```


